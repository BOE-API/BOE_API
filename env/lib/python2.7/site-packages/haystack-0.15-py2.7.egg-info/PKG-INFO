Metadata-Version: 1.0
Name: haystack
Version: 0.15
Summary: Search C Structures in a process' memory
Home-page: http://packages.python.org/haystack/
Author: Loic Jaquemet
Author-email: loic.jaquemet+python@gmail.com
License: GPL
Download-URL: http://github.com/trolldbois/python-haystack/tree/master
Description: Introduction:
        =============
        
        python-haystack is an heap analysis framework, focused on classic 
        C structure matching.
        
        The first class of algorithms gives the ability to search for known
        structures in a live process's memory, or in a memory dump.
        
        The second class of algorithms aims at giving a reverse engineering look
        at a memory dump, focusing on reconstruction, classification of classic
        C structures from memory. Heap analysis. Dynamic types definition.
        
        How to get a memory dump:
        =========================
        
        While technically you could use a third party tool, haystack actually 
        need memory mapping information to work with. 
        So there is a dumping tool included :
        
        $ sudo haystack-dump dump <pid> dumps/myssh.dump
        
        You can easily reproduce the format of the dump, its a folder/archive 
        containing each memory map in a separate file :
        * content in a file named after it's start/end addresses ( 0x000700000-0x000800000 )
        * 'mappings' file containing memory mappings metadata.  ( mappings )
        
        
        Search for known structures:
        ============================
        
        You need the python definition/ctypes structures of the known 
        structures.
        An example would be sslsnoop, which provide python ctypes structures for
        openssl and openssh structures.
        
        Quick info: This demonstrate the ability to brute-force the search 
        of a known structure, based on fields types assumptions or constraints. 
        
        The magic is performed in the model.py module.
        The constraints are applied on the python ctypes structures by the 
        'expectedValues' static field.
        
        Command line example: 
        ---------------------
        
        For example, this will dump the session_state structures + pointed 
        children structures as an python object that we can play with.
        Lets assume we have an ssh client or server as pid 4042.
        
        $ sudo haystack --pid 4042 sslsnoop.ctypes_openssh.session_state search > instance.pickled
        $ sudo haystack --pid 4042 sslsnoop.ctypes_openssh.session_state refresh 0xb8b70d18 > instance.pickled
        $ sudo haystack --pid xxxx <your ctypes Structure> search > instance.pickled
        
        
        Graphic example :
        -----------------
        
        There is also an attempt at a Graphical GUI ( Qt4 )
        Dump the process, then you can open it in the GUI :
        
        $ haystack-gui # ( and Ctrl-O , click click)
        $ haystack-gui --dumpname dumps/myssh.dump
        
        You can the search a structure from the heap of that memory mapping.
        You have to import your extensions before that to have them listed in 
        the search dialog.
        ( try sslsnoop.ctypes_openssh ) 
        
        Tip: As this is a beta version, sslsnoop is hard-imported in the GUI. 
        You should have it installed.
        
        
        python script interpreter example:
        ----------------------------------
        >>> import haystack
        >>> pid = 4042
        >>> haystack.findStruct( pid , sslsnoop.ctypes_openssh.session_state)
        >>> haystack.findStruct( pid , ctypes_example.big_struct)
        
        
        Extensibility:
        --------------
        
        It's easy to add new structures. Its basically the ctypes definition of 
        C structures that should be done following the next 4 steps :
        
        a) Your class must extend haystack.model.LoadableMembers.
        b) You must give your class a completed _fields_ (with one _ ), like 
           all ctypes.Structure 
        b bis) Optional - You can add an expectedValues dict() to your ctype 
               classes to add some constraints.
        b ter) Optional - You can override isValid and loadMembers to implement
               advanced constraints validation.
        d) call model.registerModule(sys.modules[__name__])
        
        Easy 'creation' : 
          use h2xml and xml2py from ctypeslib to generate a python module from
          a C header.
        
        Advanced use : 
          You can override methods isValid and loadMembers to implements 
          advanced data loading and constraints validation.
          ( see sslsnoop for loading cipher structures from void pointers )
        
        The global algorithm :
        
        a) The ctypes structure is mapped at the first offset of the memory 
           mapping.
        b) The method loadMembers is called.
        c) The method isValid is called on self.
        d) A validation test is done for each members, constraints and 
           memory space validity (pointers) are tested.
           The validation does not recurse.
        e) Each members is then 'loaded' to local space. 
           If the value is a pointer or a model.LoadableMembers type, it's 
           recursively Loaded. ( and validated).
           If the recursive loading fails, the calls fails. bye-bye.
        f) If all contraints are respected, we have a match.
        g) Move to see next offset, goto a)
        
        
        Heap analysis / Memory Reverser / Memory forensics:
        ===================================================
        
        Quick info: This tool parse the heap for allocator structures, pointers
        values, small integers and text (ascii/utf).
        Given all the previous information, it can extract instances 
        and helps you in classifying and defining structures types.
        
        TODO: implement feedback
        
        Command line example:
        --------------------
        This will create several files in the folder containing <yourdumpname>.
        
        $ python haystack-reverse instances <yourdumpname>
        
          The most insteresting one being the <yourdumpname>.headers_values.py that
          gives you an ctypes listing of all found structures, with gestimates
          on fields types.
        
          A <yourdumpname>.gexf file is also produced to help you visualize 
          instances links. It gets messy for any kind of serious application.
        
        
        Show ordered list of structures, by similarities :
        
        $ python haystack-reverse show <yourdumpname>
        
        Show only structures of size 324:
        
        $ python haystack-reverse show --size 324 <yourdumpname>
        
        
        Write to file an attempt to reversed the original types hierachy :
        
        $ python haystack-reverse typemap <yourdumpname>
        
        
        Extension examples :
        ====================
        @ see sslsnoop in the Pypi repo. openssl and nss structures are generated.
        @ see ctypes-kernel on my github. Linux kernel structure are generated from a build kernel tree. (VMM is abitch)
        
        
        Pseudo Example for extension :
        ==============================
        from haystack.model import LoadableMembers, RangeValue, NotNull
        
        class OpenSSLStruct(LoadableMembers):
          pass
        
        class RSA(OpenSSLStruct):
          ''' rsa/rsa.h '''
          _fields_ = [
          ("pad",  ctypes.c_int), 
          ("version",  ctypes.c_long),
          ("meth",ctypes.POINTER(BIGNUM)),#const RSA_METHOD *meth;
          ("engine",ctypes.POINTER(ENGINE)),#ENGINE *engine;
          ('n', ctypes.POINTER(BIGNUM) ), ## still in ssh memap
          ('e', ctypes.POINTER(BIGNUM) ), ## still in ssh memap
          ('d', ctypes.POINTER(BIGNUM) ), ## still in ssh memap
          ('p', ctypes.POINTER(BIGNUM) ), ## still in ssh memap
          ('q', ctypes.POINTER(BIGNUM) ), ## still in ssh memap
          ('dmp1', ctypes.POINTER(BIGNUM) ),
          ('dmq1', ctypes.POINTER(BIGNUM) ),
          ('iqmp', ctypes.POINTER(BIGNUM) ),
          ("ex_data", CRYPTO_EX_DATA ),
          ("references", ctypes.c_int),
          ("flags", ctypes.c_int),
          ("_method_mod_n", ctypes.POINTER(BN_MONT_CTX) ),
          ("_method_mod_p", ctypes.POINTER(BN_MONT_CTX) ),
          ("_method_mod_q", ctypes.POINTER(BN_MONT_CTX) ),
          ("bignum_data",ctypes.POINTER(ctypes.c_ubyte)), ## moue c_char_p ou POINTER(c_char) ?
          ("blinding",ctypes.POINTER(BIGNUM)),#BN_BLINDING *blinding;
          ("mt_blinding",ctypes.POINTER(BIGNUM))#BN_BLINDING *mt_blinding;
          ]
          expectedValues={
            "pad": [0], 
            "version": [0], 
            "references": RangeValue(0,0xfff),
            "n": [NotNull],
            "e": [NotNull],
            "d": [NotNull],
            "p": [NotNull],
            "q": [NotNull],
            "dmp1": [NotNull],
            "dmq1": [NotNull],
            "iqmp": [NotNull]
          }
          def loadMembers(self, mappings, maxDepth):
            print 'example'
            if not LoadableMembers.loadMembers(self, mappings, maxDepth):
              log.debug('RSA not loaded')
              return False
            return True
        
        # register to haystack
        model.registerModule(sys.modules[__name__])
        
        #EOF
        
        
        not so FAQ :
        ============
        
        What does it do ?:
        ------------------
        The basic functionnality is to search in a process' memory maps for a 
        specific C Structures.
        The extended reverse engineering functionnality aims at reversing 
        structures from memory/heap analysis.
        
        How do it knows that the structures is valid ? :
        ------------------------------------------------
        You add some constraints ( expectedValues ) on the fields. Pointers are also a good start.
         
        Where does the idea comes from ? :
        -----------------------------------
        http://www.hsc.fr/ressources/breves/passe-partout.html.fr originally.
        since I started in March 2011, I have uncovered several other related 
        previous work.
        Most of them are in the docs/ folder.
        Other related work are mona.py from Immunity, some other Madiant stuff...
        In a nutshell, this is probably not an original idea. But yet, I could 
        not find a operational standalone lib for live memory extraction for sslsnoop, soo....
        
        
        What are the dependencies ? :
        ----------------------------
        python-ptrace on linux
        winappdbg on win32
        several others...
        
Keywords: memory,analysis,forensics,struct,ptrace,reverse,heap
Platform: UNKNOWN
Classifier: Topic :: System :: Networking
Classifier: Topic :: Security
Classifier: Environment :: Console
Classifier: Environment :: X11 Applications :: Qt
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Programming Language :: Python
Classifier: Development Status :: 5 - Production/Stable
